If and if-else statements are handled in the AST_IF case of the evaluate_node function, where the condition is first evaluated and checked for numeric value. Based on this evaluation, the appropriate block is executed, with the statement always returning 0 as its result. Similarly, while loops are implemented in the AST_WHILE case, continuously evaluating the condition and executing the body until the condition becomes false, also always returning 0.

Functions are implemented using a two-step process: definition and calling. During function definition, a Function object is created to store the function's name, parameters, body, and current environment. This object is then bound to the function's name in the global environment. Function calls involve looking up the function by name, creating a new environment for the call (with the function's definition environment as the parent), evaluating and binding arguments to parameters, and executing the function body in this new environment. The value of the last statement in the function body is returned as the function's result. Block-structured scoping is achieved using the Environment class, where each block creates a new Environment object with the current environment as its parent. This approach ensures proper variable scoping and allows nested blocks to define variables with the same names as outer blocks without conflict. I actually had already implemented short-circuit evaluation for logical AND and OR operations in Assignment 1. I faced a challenge getting a few of the error test cases to pass. 